import collections
from typing import Any, Dict, Iterator, Optional, Type, List, Union

class OrderedMultiDict(dict):
    def __init__(self, *args:Any, **kwargs:Any) -> None:
        self._map = None
        self.root = None
        ...
    def _clear_ll(self): ...
    def _insert(self, k:str, v:int) -> None: ...
    def add(self, k:str, v:int) -> None: ...
    def addlist(self, k: str, v:Union[range|list[int]]) -> List: ...
    def get(self, k:str) -> int: ...
    # def getlist(self, k:str, default=...)-> List: ...
    def getlist(self, k:str, default=...): ...
    def setdefault(self, k:str, default=...)-> int: ...
    @classmethod
    def fromkeys(cls, keys, default=...)-> List: ...
    def update(self, e:dict[str, int], **f:Any) -> List: ...
    def update_extend(self, e: Union[str | int]) -> List: ...
    def __setitem__(self, k:str, v:int) -> None: ...
    def __getitem__(self, k:str) -> int: ...
    def __delitem__(self, k:str) -> int: ...
    def __eq__(self, other:list) -> None: ...
    def __ne__(self, other:list) -> None: ...
    def pop(self, k, default=...) -> List: ...
    def popall(self, k, default=...) -> List: ...
    def poplast(self, k:..., default=...) -> List: ...
    def _remove(self, k:str) -> List: ...
    def _remove_all(self, k: str) -> List: ...
    def iteritems(self, multi:bool = ...)-> collections.Iterable: ...
    def iterkeys(self, multi:bool = ...)-> collections.Iterable: ...
    def itervalues(self, multi:bool = ...)-> None: ...
    def todict(self, multi:bool = ...)-> None: ...
    # или def todict(self, multi:Union [bool, None])-> None: ...
    def sorted(self, k:Union[None,str], reverse: bool) -> OrderedMultiDict: ...
    def sortedvalues(self, k:Union[None,str], reverse: bool) -> OrderedMultiDict: ...
    def keys(self, multi:bool = ...)-> List: ...
    def values(self, multi:bool = ...)-> List: ...
    def items(self, multi:bool = ...)-> List: ...
    def inverted(self): ...










